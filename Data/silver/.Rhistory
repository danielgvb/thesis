# Compute instantaneous fitted values
full_forecast_inst <- make.instantaneous(full_forecast)
# Prepare data for plotting (only test set forecast is plotted)
if (cumulative == FALSE) {
df_plot <- data.frame(
Time = 1:length(time_series),
Actual = time_series,
Fitted = c(rep(NA, split_index), full_forecast_inst[(split_index + 1):length(time_series)]) # Only show test forecast
)
} else {
df_plot <- data.frame(
Time = 1:length(time_series),
Actual = cumsum(time_series),
Fitted = c(rep(NA, split_index), full_forecast[(split_index + 1):length(time_series)]) # Only show test forecast
)
}
# Create plot
p <- ggplot(df_plot, aes(x = Time)) +
geom_line(aes(y = Actual), color = "black", size = 1) +
geom_line(aes(y = Fitted), color = "red", linetype = "dashed", size = 1) +
ggtitle(paste("Cases")) +
ylab("Cases") +
xlab("Time") +
theme_minimal()
return(p)
}
calculate_metrics_bm_epidemics_test <- function(time_series, test_split = 0.2) {
# Filter data for the specific country
time_series <- time_series
time_series_cum <- cumsum(time_series)
# Define train-test split index
split_index <- floor((1 - test_split) * length(time_series))
# Split data into training and test sets
train_series <- time_series[1:split_index]
test_series <- time_series[(split_index + 1):length(time_series)]
test_series_cum <- time_series_cum[(split_index + 1):length(time_series_cum)]
# Train BM model only on the training set
bm_model <- BM(train_series, display = FALSE)
# Forecast only for the test period
test_forecast <- predict(bm_model, newx = (split_index + 1):length(time_series))
# Compute RMSE and R² based on cumulative values
residuals <- test_series_cum - test_forecast
ss_res <- sum(residuals^2)
ss_tot <- sum((test_series_cum - mean(test_series_cum))^2)
# Calculate metrics
r2 <- 1 - (ss_res / ss_tot)
rmse <- sqrt(mean(residuals^2))
return(c(R2 = r2, RMSE = rmse))
}
calculate_metrics_ggm_epidemics_test <- function(time_series, test_split = 0.2) {
time_series <- time_series
time_series_cum <- cumsum(time_series)
# Define train-test split index
split_index <- floor((1 - test_split) * length(time_series))
# Split data into training and test sets
train_series <- time_series[1:split_index]
test_series_cum <- time_series_cum[(split_index + 1):length(time_series)]
# Initialize GGM model variable
ggm_model <- NULL
# Attempt first GGM model
try_result <- try({
ggm_model <- GGM(train_series, mt='base', display = FALSE)
}, silent = TRUE)
# Check if an error occurred
if (inherits(try_result, "try-error")) {
if (grepl("chol.default.*not positive", try_result)) {
message("Cholesky decomposition error detected. Trying alternative model...")
# Attempt alternative GGM method
try_result_alt <- try({
ggm_model <- GGM(train_series, mt=function(x) pchisq(x,10), display = FALSE)
}, silent = TRUE)
# If alternative method also fails, stop execution
if (inherits(try_result_alt, "try-error")) {
stop("Both GGM model attempts failed. Error: ", try_result_alt)
}
} else {
stop("Unexpected error in GGM model: ", try_result)
}
}
# Ensure the model was successfully created
if (is.null(ggm_model)) {
stop("Failed to fit GGM model.")
}
# Forecast only for the test period
test_forecast <- predict(ggm_model, newx = (split_index + 1):length(time_series))
# Compute RMSE and R² based on cumulative values
residuals <- test_series_cum - test_forecast
ss_res <- sum(residuals^2)
ss_tot <- sum((test_series_cum - mean(test_series_cum))^2)
# Calculate metrics
r2 <- 1 - (ss_res / ss_tot)
rmse <- sqrt(mean(residuals^2))
return(c(R2 = r2, RMSE = rmse))
}
# returns residuals for train and test
ggm_residuals_epidemics_test <- function(time_series, test_split = 0.2) {
time_series <- time_series
time_series_cum <- cumsum(time_series)
# Define train-test split index
split_index <- floor((1 - test_split) * length(time_series))
# Split data into training and test sets
train_series <- time_series[1:split_index]
test_series_cum <- time_series_cum[(split_index + 1):length(time_series_cum)]
# Initialize GGM model variable
ggm_model <- NULL
# Attempt first GGM model
try_result <- try({
ggm_model <- GGM(train_series, mt='base', display = FALSE)
}, silent = TRUE)
# Check if an error occurred
if (inherits(try_result, "try-error")) {
if (grepl("chol.default.*not positive", try_result)) {
message("Cholesky decomposition error detected. Trying alternative model...")
# Attempt alternative GGM method
try_result_alt <- try({
ggm_model <- GGM(train_series, mt=function(x) pchisq(x,10), display = FALSE)
}, silent = TRUE)
# If alternative method also fails, stop execution
if (inherits(try_result_alt, "try-error")) {
stop("Both GGM model attempts failed. Error: ", try_result_alt)
}
} else {
stop("Unexpected error in GGM model: ", try_result)
}
}
# Ensure the model was successfully created
if (is.null(ggm_model)) {
stop("Failed to fit GGM model.")
}
# Forecast for the training period
fitted_train <- predict(ggm_model, newx = 1:split_index)
# Forecast only for the test period
fitted_test <- predict(ggm_model, newx = (split_index + 1):length(time_series))
# Calculate residuals for the training set
residuals_train <- time_series_cum[1:split_index] - fitted_train
# Create a dataframe with train residuals for ARIMA model fitting
df_train_residuals <- data.frame(
Time = 1:split_index,
Residuals = residuals_train,
Cases = cumsum(train_series),
Fitted = fitted_train
)
# Create and return a dataframe with test fitted values and actual test values
df_test <- data.frame(
Time = (split_index + 1):length(time_series),
Fitted = fitted_test,
Cases = test_series_cum  # actual cases for the test period
)
return(list(train_residuals = df_train_residuals, test_data = df_test))
}
process_epidemics_test <- function(time_series, test_split = 0.2) {
# Step 1: Get GGM residuals and test data
ggm_results <- ggm_residuals_epidemics_test(time_series, test_split = test_split)
df_train <- ggm_results$train_residuals
df_test <- ggm_results$test_data
# Step 2: Fit an ARIMA model on the cumulative cases from the train set using GGM fitted values as external regressor
arima_model <- auto.arima(df_train$Cases, xreg = df_train$Fitted)
# Step 3: Forecast cumulative cases for the test period using ARIMA model
arima_forecast <- forecast(arima_model, h = nrow(df_test), xreg = df_test$Fitted)$mean
# Step 4: Create full dataset for visualization
plot_data <- data.frame(
Time = c(df_train$Time, df_test$Time),  # Full time range (train + test)
Cases = c(df_train$Cases, df_test$Cases),  # Actual full series
Fitted = c(rep(NA, length(df_train$Cases)), arima_forecast)  # Show forecast only in test period
)
# Step 5: Generate the plot
plot <- ggplot(plot_data, aes(x = Time)) +
geom_line(aes(y = Cases, color = "Actual"), linewidth = 1) +  # Full actual series
geom_line(aes(y = Fitted, color = "Forecast"), linewidth = 1, linetype = "dashed") +  # Forecast only for test period
labs(
title = 'Epidemic Cases',
x = "Time",
y = "Cumulative Cases",
color = "Legend"
) +
theme_minimal() +
scale_color_manual(values = c("Actual" = "black", "Forecast" = "red")) +
theme(
legend.position = c(0.9, 0.1)  # Bottom right
)
return(plot)
}
process_epidemics_metrics_test <- function(time_series, test_split = 0.2) {
# Step 1: Get GGM residuals and test data
ggm_results <- ggm_residuals_epidemics_test(time_series, test_split = test_split)
df_train <- ggm_results$train_residuals
df_test <- ggm_results$test_data
# Step 2: Fit an ARIMA model on the training set cumulative cases with GGM fitted values as an external regressor
arima_model <- auto.arima(df_train$Cases, xreg = df_train$Fitted)
# Step 3: Forecast cumulative cases for the test period using ARIMA with GGM as xreg
arima_forecast <- forecast(arima_model, h = nrow(df_test), xreg = df_test$Fitted)$mean
# Step 4: Compute R² and RMSE for the test set
actual <- df_test$Cases  # Actual test set cumulative cases
predicted <- arima_forecast  # ARIMA forecasted test values
# R² calculation
ss_total <- sum((actual - mean(actual))^2)
ss_residual <- sum((actual - predicted)^2)
r_squared <- 1 - (ss_residual / ss_total)
# RMSE calculation
rmse <- sqrt(mean((actual - predicted)^2))
# Step 5: Return results as a data frame
result <- data.frame(
R2 = r_squared,
RMSE = rmse
)
return(result)
}
# 20. BM Epidemics-------------------------
## 20.1 Dengue-------------
# new cases
plot_bm_epidemics_test(ts_casos_dengue, cumulative = FALSE,  test_split = 0.5)
# cumulative
plot_bm_epidemics_test(ts_casos_dengue, cumulative = TRUE, test_split = 0.5)
## 20.2 Zika-------------
# new cases
plot_bm_epidemics_test(ts_casos_zika, cumulative = FALSE, test_split = 0.9)
# cumulative
plot_bm_epidemics_test(ts_casos_zika, cumulative = TRUE, test_split = 0.9)
## 11.3 Chicunguya-------------
# new cases
plot_bm_epidemics_test(ts_casos_chic, cumulative = FALSE, test_split = 0.9)
# cumulative
plot_bm_epidemics_test(ts_casos_chic, cumulative = TRUE, test_split = 0.9)
# 21. GGM Epidemics----------------------
## 21.1 Dengue-------------
# new cases
plot_ggm_epidemics_test(ts_casos_dengue, cumulative = FALSE, test_split = 0.5)
# cumulative
plot_ggm_epidemics_test(ts_casos_dengue, cumulative = TRUE, test_split = 0.5)
## 21.2 Zika-------------
# new cases
plot_ggm_epidemics_test(ts_casos_zika, cumulative = FALSE, test_split = 0.9)
# cumulative
plot_ggm_epidemics_test(ts_casos_zika, cumulative = TRUE, test_split = 0.9)
## 21.3 Chicunguya-------------
# new cases
plot_ggm_epidemics_test(ts_casos_chic, cumulative = FALSE, test_split = 0.9)
# cumulative
plot_ggm_epidemics_test(ts_casos_chic, cumulative = TRUE, test_split = 0.9)
# 22. BM vs GGM Metrics Epidemics---------------
# Assuming ts_casos_dengue, ts_casos_zika, and ts_casos_chic are your time series
series_list <- list(
Dengue = ts_casos_dengue,
Zika = ts_casos_zika,
Chicungunya = ts_casos_chic
)
# Initialize a data frame to store the results
results <- data.frame(
Series = character(),
Model = character(),
R2 = numeric(),
RMSE = numeric(),
stringsAsFactors = FALSE
)
# Loop through each series and calculate metrics for both models
for (name in names(series_list)) {
time_series <- series_list[[name]]
# Calculate metrics for BM model
bm_metrics <- calculate_metrics_bm_epidemics_test(time_series, test_split = 0.5)
results <- rbind(results, data.frame(
Series = name,
Model = "BM",
R2 = bm_metrics["R2"],
RMSE = bm_metrics["RMSE"],
stringsAsFactors = FALSE
))
# Calculate metrics for GGM model
ggm_metrics <- calculate_metrics_ggm_epidemics_test(time_series,  test_split = 0.5)
results <- rbind(results, data.frame(
Series = name,
Model = "GGM",
R2 = ggm_metrics["R2"],
RMSE = ggm_metrics["RMSE"],
stringsAsFactors = FALSE
))
}
# Print the results table
print(results)
# 23. GGM + Refinement---------------------
## 23.1 Dengue---------------
process_epidemics_test(ts_casos_dengue, test_split = 0.5)
## 23.2 Zika---------------
process_epidemics_test(ts_casos_zika, test_split = 0.9)
## 23.3 Chicunguya---------------
process_epidemics_test(ts_casos_chic, test_split = 0.9)
## 23.3 Chicunguya---------------
process_epidemics_test(ts_casos_chic, test_split = 0.9)
# 24. GGM + Refinement Epidemics Metrics----------------------
# Initialize a data frame to store the results
results_arima <- data.frame(
Series = character(),
R2 = numeric(),
RMSE = numeric(),
stringsAsFactors = FALSE
)
# Loop through each series and calculate metrics using process_epidemic_metrics
for (name in names(series_list)) {
time_series <- series_list[[name]]
# Calculate metrics using process_epidemic_metrics
metrics <- process_epidemics_test(time_series, test_split = 0.5)
# Append the results to the data frame
results_arima <- rbind(results_arima, data.frame(
Series = name,
R2 = metrics["R2"],
RMSE = metrics["RMSE"],
stringsAsFactors = FALSE
))
}
# 24. GGM + Refinement Epidemics Metrics----------------------
# Initialize a data frame to store the results
results_arima <- data.frame(
Series = character(),
R2 = numeric(),
RMSE = numeric(),
stringsAsFactors = FALSE
)
# Loop through each series and calculate metrics using process_epidemic_metrics
for (name in names(series_list)) {
time_series <- series_list[[name]]
# Calculate metrics using process_epidemic_metrics
metrics <- process_epidemics_metrics_test(time_series, test_split = 0.5)
# Append the results to the data frame
results_arima <- rbind(results_arima, data.frame(
Series = name,
R2 = metrics["R2"],
RMSE = metrics["RMSE"],
stringsAsFactors = FALSE
))
}
# Print the results table
print(results_arima)
df_var <-read.csv("varicela.csv")
plot(df_var$Casos)
# Ensure the DATE column is in Date format
df_var$DATE <- as.Date(df_var$DATE)
# Create a time series object
ts_casos_var <- ts(
df_var$Casos,
frequency = 52,
start = c(
year(min(df_var$DATE)),
week(min(df_var$DATE))
)
)
plot(ts_casos_var, main = "Weekly Varicela Cases", xlab = "Time", ylab = "Casos")
plot(diff(ts_casos_chic), main = "Weekly Varicela-Diff", xlab = "Time", ylab = "Casos")
## 11.4 Varicela-------------
# new cases
plot_bm_model_epidemics(ts_casos_var, cumulative = FALSE)
# cumulative
plot_bm_model_epidemics(ts_casos_var, cumulative = TRUE)
## 12.4 Chicunguya-------------
# new cases
plot_ggm_model_epidemics(ts_casos_var, cumulative = FALSE)
# cumulative
plot_ggm_model_epidemics(ts_casos_var, cumulative = TRUE)
# Assuming ts_casos_dengue, ts_casos_zika, and ts_casos_chic are your time series
series_list <- list(
Dengue = ts_casos_dengue,
Zika = ts_casos_zika,
Chicungunya = ts_casos_chic,
Varicela = ts_casos_var
)
# Initialize a data frame to store the results
results <- data.frame(
Series = character(),
Model = character(),
R2 = numeric(),
RMSE = numeric(),
stringsAsFactors = FALSE
)
# Loop through each series and calculate metrics for both models
for (name in names(series_list)) {
time_series <- series_list[[name]]
# Calculate metrics for BM model
bm_metrics <- calculate_metrics_bm_epidemics(time_series)
results <- rbind(results, data.frame(
Series = name,
Model = "BM",
R2 = bm_metrics["R2"],
RMSE = bm_metrics["RMSE"],
stringsAsFactors = FALSE
))
# Calculate metrics for GGM model
ggm_metrics <- calculate_metrics_ggm_epidemics(time_series)
results <- rbind(results, data.frame(
Series = name,
Model = "GGM",
R2 = ggm_metrics["R2"],
RMSE = ggm_metrics["RMSE"],
stringsAsFactors = FALSE
))
}
# Print the results table
print(results)
## 14.3 Varicela----------------
df_res <- ggm_residuals_epidemics(ts_casos_var)
residual_ts <- ts(df_res$Residuals)
autoplot(residual_ts) + ggtitle("Residuals Chicunguya")
autoplot(residual_ts) + ggtitle("Residuals Varicela")
## 15.4 Varicela---------------
process_epidemic(ts_casos_var, 'Varicela')
# 16. GGM + Refinement Metrics
# Initialize a data frame to store the results
results_arima <- data.frame(
Series = character(),
R2 = numeric(),
RMSE = numeric(),
stringsAsFactors = FALSE
)
# Loop through each series and calculate metrics using process_epidemic_metrics
for (name in names(series_list)) {
time_series <- series_list[[name]]
# Calculate metrics using process_epidemic_metrics
metrics <- process_epidemic_metrics(time_series)
# Append the results to the data frame
results_arima <- rbind(results_arima, data.frame(
Series = name,
R2 = metrics["R2"],
RMSE = metrics["RMSE"],
stringsAsFactors = FALSE
))
}
# Print the results table
View(results_arima)
## 11.4 Varicela-------------
# new cases
plot_bm_epidemics_test(ts_casos_var, cumulative = FALSE, test_split = 0.5)
# cumulative
plot_bm_epidemics_test(ts_casos_var, cumulative = TRUE, test_split = 0.5)
## 11.4 Varicela-------------
# new cases
plot_bm_epidemics_test(ts_casos_var, cumulative = FALSE, test_split = 0.2)
# cumulative
plot_bm_epidemics_test(ts_casos_var, cumulative = TRUE, test_split = 0.2)
## 21.4 Varicela-------------
# new cases
plot_ggm_epidemics_test(ts_casos_var, cumulative = FALSE, test_split = 0.9)
# cumulative
plot_ggm_epidemics_test(ts_casos_var, cumulative = TRUE, test_split = 0.9)
# Assuming ts_casos_dengue, ts_casos_zika, and ts_casos_chic are your time series
series_list <- list(
Dengue = ts_casos_dengue,
Zika = ts_casos_zika,
Chicungunya = ts_casos_chic,
Varicela = ts_casos_var
)
# Initialize a data frame to store the results
results <- data.frame(
Series = character(),
Model = character(),
R2 = numeric(),
RMSE = numeric(),
stringsAsFactors = FALSE
)
# Loop through each series and calculate metrics for both models
for (name in names(series_list)) {
time_series <- series_list[[name]]
# Calculate metrics for BM model
bm_metrics <- calculate_metrics_bm_epidemics_test(time_series, test_split = 0.5)
results <- rbind(results, data.frame(
Series = name,
Model = "BM",
R2 = bm_metrics["R2"],
RMSE = bm_metrics["RMSE"],
stringsAsFactors = FALSE
))
# Calculate metrics for GGM model
ggm_metrics <- calculate_metrics_ggm_epidemics_test(time_series,  test_split = 0.5)
results <- rbind(results, data.frame(
Series = name,
Model = "GGM",
R2 = ggm_metrics["R2"],
RMSE = ggm_metrics["RMSE"],
stringsAsFactors = FALSE
))
}
# Print the results table
print(results)
## 23.1 Dengue---------------
process_epidemics_test(ts_casos_dengue, test_split = 0.5)
## 23.2 Zika---------------
process_epidemics_test(ts_casos_zika, test_split = 0.9)
## 23.3 Chicunguya---------------
process_epidemics_test(ts_casos_chic, test_split = 0.9)
## 23.4 Varicela---------------
process_epidemics_test(ts_casos_var, test_split = 0.9)
## 23.4 Varicela---------------
process_epidemics_test(ts_casos_var, test_split = 0.5)
# 24. GGM + Refinement Epidemics Metrics----------------------
# Initialize a data frame to store the results
results_arima <- data.frame(
Series = character(),
R2 = numeric(),
RMSE = numeric(),
stringsAsFactors = FALSE
)
# Loop through each series and calculate metrics using process_epidemic_metrics
for (name in names(series_list)) {
time_series <- series_list[[name]]
# Calculate metrics using process_epidemic_metrics
metrics <- process_epidemics_metrics_test(time_series, test_split = 0.5)
# Append the results to the data frame
results_arima <- rbind(results_arima, data.frame(
Series = name,
R2 = metrics["R2"],
RMSE = metrics["RMSE"],
stringsAsFactors = FALSE
))
}
# Print the results table
print(results_arima)
